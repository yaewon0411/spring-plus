plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'

    //querydsl 추가
    //id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"

    // Kotlin 플러그인
    id 'org.jetbrains.kotlin.jvm' version '2.0.0'
    id 'org.jetbrains.kotlin.plugin.spring' version '2.0.0'
    id 'org.jetbrains.kotlin.plugin.jpa' version '2.0.0'
    id 'org.jetbrains.kotlin.kapt' version '2.0.0'
    id 'org.jetbrains.kotlin.plugin.lombok' version '2.0.0'


//    id "com.querydsl.codegen" version "1.0.10"
//    id "com.querydsl.apt" version "1.0.10"
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl
}

repositories {
    mavenCentral()
}

def querydslVersion = "5.0.0" // 버전을 명시적으로 선언

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // bcrypt
    implementation 'at.favre.lib:bcrypt:0.10.2'

    // jwt
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    //maria
    implementation 'org.mariadb.jdbc:mariadb-java-client'

    //devtools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // QueryDSL 공통
    implementation("com.querydsl:querydsl-jpa:${querydslVersion}:jakarta")
    implementation "com.querydsl:querydsl-core:${querydslVersion}"


    // QueryDSL - Java
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // QueryDSL - Kotlin
    kapt "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
    kapt "jakarta.annotation:jakarta.annotation-api"
    kapt "jakarta.persistence:jakarta.persistence-api"


    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    //security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    //jackson
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

}

// kotlin 추가 시작
kapt {
    correctErrorTypes = true
    keepJavacAnnotationProcessors = true
    generateStubs = true
}

allOpen {
    annotation("jakarta.persistence.Entity")
    annotation("jakarta.persistence.Embeddable")
    annotation("jakarta.persistence.MappedSuperclass")
}

kotlin {
    jvmToolchain(17)
}

//kotlin 추가 끝


//querydsl 추가 시작
def querydslDir = "src/main/generated"


//querydsl {
//    jpa = true
//    querydslSourcesDir = querydslDir
//}


sourceSets {
    main {
        java.srcDirs += [querydslDir]
        //kotlin.srcDirs += [querydslDir]
    }
}

//compileQuerydsl {
//    options.annotationProcessorPath = configurations.querydsl
//}


//querydsl 추가 끝



tasks.named('test') {
    useJUnitPlatform()
}
